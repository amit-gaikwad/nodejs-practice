/**
 * http, https, fs, path and  os are default module
 */

/**
 * http -> launch a server and send requests
 * https -> launch a SSL server
 * fs -> 
 * require -> import files into any file it is default method exposed by nodejs
 * 
 */
 single Thread, Event Loop and blocking code


incoming request

your code -> single javascript thread
                                    -> Event Loop
                                        handle Event Callbacks

                                    -> fs 
                                        send to  -> Worker Pool -> managed by nodejs 
                                                    do the heavly Lifting
                                                    Different Thread(s)!

                                    Once WOrker pool complete read file then it trigger callback of event Loop


Event Loop -> started by nodejs 
                Checks for the
                            Timers
                                Execute setTimeout, setInterval Callbacks
                            Pending Callbacks
                                Execute I/O related Callbacks that were deffered
                            Poll 
                                Retrieve new I/O events Execute their Callbacks
                            Check 
                                Execute setImmediate() Callbacks
                            Close Callbacks
                                Execute all close event callbacks
                            process.exit() -> use refs === 0


Note : the createServer() event never finishes by default


Types of Error :

1. Syntax Error
2. Runtime Error
3. Logical Error


Express.js ?
  helps us to handle parsing data, focus on server logic which is more complex
  use a framework for the heavy lifting 

  Alternative for Express.js
    Vanilla Node.js
    Adonis.js -> Php framework kind
    Koa
    Sails.js
    and more search on google
  

Using Middleware :

        Request -> Middleware -> Middleware -> Response
                          next() -> res.send()

    next() -> allows code to call next Middleware

    res.send -> dont need to add response type it will automatically add as per the data


Routing :

  app.use -> have different implementation
  we can pass first argument is path e.g. /student

returning Html page


app.use(express.static(path.join(__dirname,'public'))) => give read access to public folder server to read the folder publicly



Managing Data(without Data)

REnder Dynamic data

UnderStand template engine